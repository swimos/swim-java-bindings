// Copyright 2015-2024 Swim Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// THIS FILE IS AUTOMATICALLY GENERATED BY THE BYTE BRIDGE LIBRARY.
/// ANY CHANGES MADE MAY BE LOST.
package ai.swim;

import org.msgpack.core.MessagePacker;
import java.io.IOException;

public class Superclass {

  private byte fieldA = 0;

  private int member_field_b = 0;

  /**
   * Gets fieldA.
   * <p>
   * Default value: 0.
   *
   * @return fieldA
   */
  public byte getFieldA() {
    return this.fieldA;
  }

  /**
   * Sets the new fieldA.
   *
   * @param fieldA the new fieldA
   * @throws IllegalArgumentException if fieldA is negative
   */
  public void setFieldA(byte fieldA) {
    if (fieldA < 0) {
      throw new IllegalArgumentException("'fieldA' must be positive");
    }
    this.fieldA = fieldA;
  }

  /**
   * Gets member_field_b.
   * <p>
   * Default value: 0.
   *
   * @return member_field_b
   */
  public int getMemberFieldB() {
    return this.member_field_b;
  }

  /**
   * Sets the new member_field_b.
   *
   * @param member_field_b the new member_field_b
   * @throws IllegalArgumentException if member_field_b is negative
   */
  public void setMemberFieldB(int member_field_b) {
    if (member_field_b < 0) {
      throw new IllegalArgumentException("'member_field_b' must be positive");
    }
    this.member_field_b = member_field_b;
  }

  /**
   * Returns a byte array representation of the current configuration.
   */
  public void pack(MessagePacker __packer) throws IOException {
    __packer.packArrayHeader(2);
    __packer.packByte(this.fieldA);
    __packer.packInt(this.member_field_b);
  }

  @Override
  public String toString() {
    return "Superclass{" +
     "fieldA='" + fieldA + '\'' +
     ", member_field_b='" + member_field_b + '\'' +
     '}';
  }

}
