// Copyright 2015-2024 Swim Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// THIS FILE IS AUTOMATICALLY GENERATED BY THE BYTE BRIDGE LIBRARY.
/// ANY CHANGES MADE MAY BE LOST.
package ai.swim;

import org.msgpack.core.MessagePacker;
import java.io.IOException;

public class Test {

  private byte[] a = new byte[] {};

  /**
   * Gets a.
   * <p>
   * Default value: new byte[] {}.
   *
   * @return a
   */
  public byte[] getA() {
    return this.a;
  }

  /**
   * Sets the new a.
   *
   * @param a the new a
   * @throws IllegalArgumentException if a contains negative elements
   */
  public void setA(byte[] a) {
    for (byte b : a) {
      if (b < 0) {
        throw new IllegalArgumentException("'a' contains negative numbers");
      }
    }
    this.a = a;
  }

  /**
   * Returns a byte array representation of the current configuration.
   */
  public void pack(MessagePacker __packer) throws IOException {
    __packer.packArrayHeader(1);
    __packer.packInt(this.a.length);
    for (byte __elem_ : this.a) {
      __packer.packByte(__elem_);
    }
  }

  @Override
  public String toString() {
    return "Test{" +
     "a='" + a + '\'' +
     '}';
  }

}
